
1.	线程安全的核心在于对状态访问的操作进行管理，共享（Shared）和可变（Mutable）状态的访问
2.	Java主要同步机制是关键字synchronized，同步还包括了volatile类型变量，显示锁（Explicit Lock）还有原子变量
3.	线程安全类，线程安全程序基本相同，但并不包含
4.	单线程的正确性近似定义为“所见即所得“。多线程的线程安全性：”当多个线程访问某个类时，这个类始终都表现出正确的行为，那么就称这个类时线程安全的，并不需要在调用它的代码中加上额外的同步与协同“。
5.	无状态：”既不包含任何域，也不包含任何对其他类中域的引用“。计算过程中的临时状态仅保存在线程栈上的局部变量中，只有正在执行的线程才能访问，所以没有任何的共享状态。所以是”线程安全“的。（无状态对象是指类中不包含实例域，可能有静态域）
6.	假设有A，B两个操作，如果从执行A的线程看，当另一个线程执行B时，要么全部将B执行玩，要么完全不执行B，那么A和B对彼此来说是原子的。
7.	尽可能使用现有的线程安全对象（若只需要一个对象）来管理类的状态会更加容易和验证线程安全性
8.	每个Java对象，都可以用作作为同步的锁，内置锁
9.	重入性：是由每个线程来持有锁，当这个线程已经获得锁之后，之后再次进入临界区就不需要再次获得锁
10.	每个共享的和可变的变量都应该只用一个锁来维护
11.	需要尽可能的减少同步块的规模，尽量将不影响共享状态且执行时间较长的操作从同步块中分离
12.	当执行时间较长的计算或者无法快速完成的操作时（I/O），一定不要持有锁
