1.	同步代码块，同步方法可以确保以原子的方式执行操作
2.	内存可见性（Memory Visiblility）：确保当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。
3.	在没有同步的情况下，由于编译器，处理器以及运行时都可能对操作的执行顺序进行意想不到的调整。
4.	最低安全性保证（out-of-thin-airsafety）：当没有同步的情况下读取变量时，可能得到一个失效值，但至少这个值是由之前的某个线程设置的值，而不是随机的值
5.	Java内存模型要求，变量的读取操作和写入操作都必须是原子操作。但对于非volatile的long类型和double类型的变量，JVM允许将64位的读写操作分解为两个32位的操作。
6.	volatile变量是一种稍弱的同步机制，用来确保变量更新操作通知到其他进程
7.	volatile变量仅仅保证可见性，无法保证原子性
8.	发布（Publish）：使对象能够在当前作用域之外的代码中使用：将一个指向对象的引用保存到其他代码能够访问的地方。
9.	逸出（Escape）：当某个不应该发布的对象被发布时，就叫逸出
10.	外部（Alien）方法是指行为并不由类本身规定的方法，当把类的对象传递给外部方法时，就相当于发布了这个对象
11.	
